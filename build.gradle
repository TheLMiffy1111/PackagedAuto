import java.nio.file.Files
import java.nio.file.Paths
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

buildscript {
    repositories {
        maven {
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
        maven {
            url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
        }
        maven {
            url = "https://jitpack.io/"
        }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:1.2.13"
        classpath "de.undercouch:gradle-download-task:5.3.1"
    }
}

apply plugin: "forge"
apply plugin: "eclipse"
apply plugin: "maven-publish"
apply plugin: "de.undercouch.download"

repositories {
    jcenter()
    flatDir {
        dirs "libs"
    }
    maven {
        url = "https://chickenbones.net/maven/"
    }
    maven {
        url = "https://maven.mcmoddev.com/"
    }
    maven {
        url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
    }
    maven {
        url = "https://maven.covers1624.net/"
    }
    maven {
        url = "https://jitpack.io/"
    }
    maven {
        url = "https://cursemaven.com/"
    }
    maven {
        url = "https://modmaven.dev/"
    }
}

version = "1.7.10-W.0.0.4"
group = "thelm.packagedauto"
archivesBaseName = "PackagedAuto"

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}
compileJava.options.encoding = "UTF-8"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
}

dependencies {
    implementation "com.github.GTNewHorizons:NotEnoughItems:2.3.27-GTNH:dev"
    implementation "com.github.GTNewHorizons:CodeChickenCore:1.1.11:dev"
    implementation "com.github.GTNewHorizons:CodeChickenLib:1.1.7:dev"

    implementation "curse.maven:cofh-core-69162:2388751"
    implementation "curse.maven:thermal-foundation-222880:2388753"
    implementation "curse.maven:thermal-expansion-69163:2388759"
    implementation "curse.maven:thermal-dynamics-227443:2388757"

    implementation deobfCurse("applied-energistics-2-223794:2296430")
    implementation deobfCurse("not-enough-energistics-515565:3661928")
    implementation deobfCurse("avaritia-233785:2519595")
}

def manifestAttributes = [
        "Specification-Title": "PackagedAuto",
        "Specification-Vendor": "thelm",
        "Specification-Version": "W",
        "Implementation-Title": "${archivesBaseName}",
        "Implementation-Version": "${version}",
        "Implementation-Vendor": "thelm"
        //"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
]

jar {
    manifest {
        attributes(manifestAttributes)
    }
}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = "dev"
    manifest {
        attributes(manifestAttributes)
    }
}

artifacts {
    archives devJar
}

def deobfCurse(String curseDep) {
    return deobfMaven("https://www.cursemaven.com/", "curse.maven:${curseDep}")
}

def deobfMaven(String repoURL, String mavenDep) {
    if(!repoURL.endsWith("/")) {
        repoURL += "/"
    }
    String[] parts = mavenDep.split(":")
    parts[0] = parts[0].replace(".", "/")
    String jarURL
    if(parts.length > 3) {
        jarURL = "${repoURL}${parts[0]}/${parts[1]}/${parts[2]}/${parts[1]}-${parts[2]}-${parts[3]}.jar"
    }
    else {
        jarURL = "${repoURL}${parts[0]}/${parts[1]}/${parts[2]}/${parts[1]}-${parts[2]}.jar"
    }
    return deobf(jarURL)
}

def deobf(String sourceURL) {
    try {
        URL url = new URL(sourceURL)
        String fileName = url.getFile()
        int lastSlash = fileName.lastIndexOf("/")
        if(lastSlash > 0) {
            fileName = fileName.substring(lastSlash+1)
        }
        if(fileName.endsWith(".jar") || fileName.endsWith(".litemod")) {
            fileName = fileName.substring(0, fileName.lastIndexOf("."))
        }
        String hostName = url.getHost()
        if(hostName.startsWith("www.")) {
            hostName = hostName.substring(4)
        }
        List parts = Arrays.asList(hostName.split("\\."))
        Collections.reverse(parts)
        hostName = String.join(".", parts)
        return deobf(sourceURL, "${hostName}/${fileName}")
    }
    catch(Exception e) {
        return deobf(sourceURL, "deobf/${sourceURL.hashCode()}")
    }
}

def deobf(String sourceURL, String rawFileName) {
    String bon2Version = "2.5.1"
    String fileName = URLDecoder.decode(rawFileName, "UTF-8")
    String cacheDir = "${project.gradle.gradleUserHomeDir}/caches"
    String bon2Dir = "${cacheDir}/forge_gradle/deobf"
    String bon2File = "${bon2Dir}/BON2-${bon2Version}.jar"
    String obfFile = "${cacheDir}/modules-2/files-2.1/${fileName}.jar"
    String deobfFile = "${cacheDir}/modules-2/files-2.1/${fileName}-deobf.jar"
    if(file(deobfFile).exists()) {
        return files(deobfFile)
    }
    String mappingsVer
    String remoteMappings = "https://raw.githubusercontent.com/MinecraftForge/FML/1.7.10/conf/"
    String id = "1614-1.7.10"
    String mappingsZIP = "${cacheDir}/forge_gradle/maven_downloader/de/oceanlabs/mcp/mcp_snapshot_nodoc/${id}/mcp_snapshot_nodoc-${id}.zip"
    zipMappings(mappingsZIP, remoteMappings, bon2Dir)
    mappingsVer = "snapshot_${id}"
    download.run {
        src "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases/com/github/parker8283/BON2/${bon2Version}-CUSTOM/BON2-${bon2Version}-CUSTOM-all.jar"
        dest bon2File
        quiet true
        overwrite false
    }
    download.run {
        src sourceURL
        dest obfFile
        quiet true
        overwrite false
    }
    exec {
        commandLine "java", "-jar", bon2File, "--inputJar", obfFile, "--outputJar", deobfFile, "--mcVer", "1.7.10", "--mappingsVer", mappingsVer, "--notch"
        workingDir bon2Dir
        standardOutput = new FileOutputStream("${deobfFile}.log")
    }
    return files(deobfFile)
}

def zipMappings(String zipPath, String url, String bon2Dir) {
    File zipFile = new File(zipPath)
    if(zipFile.exists()) {
        return
    }
    String fieldsCache = "${bon2Dir}/data/fields.csv"
    String methodsCache = "${bon2Dir}/data/methods.csv"
    download.run {
        src "${url}fields.csv"
        dest fieldsCache
        quiet true
    }
    download.run {
        src "${url}methods.csv"
        dest methodsCache
        quiet true
    }
    zipFile.getParentFile().mkdirs()
    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile))
    zos.putNextEntry(new ZipEntry("fields.csv"))
    Files.copy(Paths.get(fieldsCache), zos)
    zos.closeEntry()
    zos.putNextEntry(new ZipEntry("methods.csv"))
    Files.copy(Paths.get(methodsCache), zos)
    zos.closeEntry()
    zos.close()
}
