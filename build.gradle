plugins {
	id "com.crystaelix.loom" version "jitpack-e3412050"
	id "eclipse"
	id "idea"
	id "maven-publish"
	id "net.kyori.blossom" version "[1,2)"
	id "me.modmuss50.mod-publish-plugin" version "0.5.0"
}

repositories {
	mavenCentral()
	flatDir {
		dirs "libs"
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://maven.parchmentmc.net/"
			}
		}
		filter {
			includeGroup "org.parchmentmc.data"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://maven.blamejared.com/"
			}
		}
		filter {
			includeGroup "mezz.jei"
			includeGroup "vazkii.patchouli"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://maven.terraformersmc.com/releases/"
			}
		}
		filter {
			includeGroup "dev.emi"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://cursemaven.com/"
			}
		}
		filter {
			includeGroup "curse.maven"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://modmaven.dev/"
			}
		}
		filter {
			includeGroup "appeng"
			includeGroup "mekanism"
		}
	}
}

sourceSets {
	main
}

def mcVersion = "1.20.4"
def modName = "PackagedAuto"
def modId = "packagedauto"
def specVersion = "4"
def vendor = "thelm"

group = "thelm.packagedauto"
version = "4.a.0.1"

archivesBaseName = "${modName}-${mcVersion}"

java {
	toolchain.languageVersion = JavaLanguageVersion.of(17)
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}

loom {
	silentMojangMappingsLicense()
	interfaceInjection.enableDependencyInterfaceInjection = false
	runs {
		configureEach {
			property "forge.logging.console.level", "debug"
		}
		client
		server
	}
}

dependencies {
	// Log4j
	implementation "org.apache.logging.log4j:log4j-core:2.22.1"

	// Minecraft
	minecraft "com.mojang:minecraft:1.20.4"
	mappings loom.layered {
		officialMojangMappings()
		parchment "org.parchmentmc.data:parchment-1.20.4:2024.02.25@zip"
	}
	neoForge "net.neoforged:neoforge:20.4.196"

	// Dependencies
	implementation("mezz.jei:jei-1.20.4-neoforge:17.3.0.49") {transitive = false}
	implementation "appeng:appliedenergistics2-neoforge:17.7.1-beta"

	// Testing
	implementation "mekanism:Mekanism:1.20.4-10.5.2.24"
	implementation "curse.maven:applied-mekanistics-574300:5166576"

	//Performance
	implementation "curse.maven:yeetusexperimentus-635427:5084420"
	implementation "curse.maven:modernfix-790626:5157655"
	implementation "curse.maven:ferritecore-429235:4954175"
}

def replacements = [
	"0@VERSION@": version
]

blossom {
	replaceToken(replacements)
}

processResources {
	inputs.properties(replacements)
	filesMatching(["mcmod.info", "META-INF/mods.toml"]) {
		filter {
			it.replace(replacements)
		}
	}
}

def manifestAttributes = [
	"Specification-Title": modName,
	"Specification-Vendor": vendor,
	"Specification-Version": specVersion,
	"Implementation-Title": archivesBaseName,
	"Implementation-Version": version,
	"Implementation-Vendor": vendor
]

jar {
	manifest.attributes(manifestAttributes)
}

sourcesJar {
	manifest.attributes(manifestAttributes)
}

publishMods {
	file = remapJar.archiveFile
	version = displayName = "${mcVersion}-${project.version}"
	changelog = file("changelog.md").text
	type = ALPHA
	modLoaders.add("neoforge")
	additionalFiles.from(remapSourcesJar.archiveFile)

	curseforge {
		accessToken = providers.gradleProperty("curseforge.token")
		projectId = "308380"
		minecraftVersions.add(mcVersion)
		optional "applied-energistics-2"
	}

	modrinth {
		accessToken = providers.gradleProperty("modrinth.token")
		projectId = "ugIdhQx4"
		minecraftVersions.add(mcVersion)
		optional "ae2"
	}
}
